name: BTC YOLO Predictions

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch:  # Allow manual triggers

jobs:
  predict:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance mplfinance pandas
        pip install ultralytics
        pip install azure-storage-blob
        pip install python-dotenv
    
    - name: Download YOLO weights
      env:
        STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: |
        # Download weights if not in repo
        if [ ! -f "ChartScanAI/weights/custom_yolov8.pt" ]; then
          echo "Downloading YOLO weights from Azure..."
          mkdir -p ChartScanAI/weights
          
          # Install Azure CLI tool
          pip install azure-storage-blob
          
          # Download weights using Python
          python << 'EOF'
from azure.storage.blob import BlobServiceClient
import os

storage_account = os.environ['STORAGE_ACCOUNT_NAME']
key = os.environ['ACCESS_KEY']
container = os.environ['CONTAINER_NAME']

connection_string = f'DefaultEndpointsProtocol=https;AccountName={storage_account};AccountKey={key};EndpointSuffix=core.windows.net'
blob_service = BlobServiceClient.from_connection_string(connection_string)
blob_client = blob_service.get_blob_client(container=container, blob='weights/custom_yolov8.pt')

with open('ChartScanAI/weights/custom_yolov8.pt', 'wb') as f:
    f.write(blob_client.download_blob().readall())
print('Weights downloaded successfully!')
EOF
        fi
    
    - name: Run predictions and evaluation
      env:
        STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: |
        cd ChartScanAI_Shiny
        python btc_predictor_azure.py
    
    - name: Create summary
      if: always()
      run: |
        echo "## BTC Prediction Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Time**: $(date -u '+%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ steps.predict.outputs.recommendation }}" ]; then
          echo "**Recommendation**: ${{ steps.predict.outputs.recommendation }}" >> $GITHUB_STEP_SUMMARY
          echo "**Buy Signals**: ${{ steps.predict.outputs.buy_signals }}" >> $GITHUB_STEP_SUMMARY
          echo "**Sell Signals**: ${{ steps.predict.outputs.sell_signals }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "No prediction results available" >> $GITHUB_STEP_SUMMARY
        fi

  performance-report:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * 0'  # Run on Sundays at midnight
    needs: predict
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install azure-storage-blob python-dotenv
    
    - name: Generate weekly report
      env:
        STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: |
        cd ChartScanAI_Shiny
        python << 'EOF'
from btc_predictor_azure import BTCPredictor
predictor = BTCPredictor()
predictor.generate_performance_report(days=7)
EOF