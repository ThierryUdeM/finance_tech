name: Daily Pattern Scanner - Multi-Ticker

on:
  schedule:
    # Run at 4:30 PM ET daily (after market close)
    - cron: '30 20 * * 1-5'  # EST: 4:30 PM ET
    - cron: '30 21 * * 1-5'  # EDT: 4:30 PM ET
  
  workflow_dispatch:  # Allow manual trigger
    inputs:
      tickers:
        description: 'Comma-separated list of tickers (default: all)'
        required: false
        default: 'NVDA,AAPL,MSFT,BTC-USD,AC.TO'
        type: string

jobs:
  scan-daily-patterns:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python with conda (includes TA-Lib)
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: '3.10'
        miniforge-version: latest
        use-mamba: true
        channels: conda-forge
        channel-priority: strict
    
    - name: Install dependencies using conda/mamba
      shell: bash -l {0}
      run: |
        # Install TA-Lib and other dependencies via conda-forge
        mamba install -y ta-lib pandas numpy yfinance
        
        # Install Azure dependencies via pip
        pip install azure-storage-blob python-dotenv
        
        # Verify installation
        python -c "import talib; print('TA-Lib version:', talib.__version__)"
        python -c "import numpy as np; import talib; print('TA-Lib test:', talib.SMA(np.array([1,2,3,4,5], dtype=float), 3))"
    
    - name: Create config directory and .env file
      shell: bash -l {0}
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Run ML-optimized daily pattern scanner for all tickers
      shell: bash -l {0}
      run: |
        export TICKER="ALL"
        python daily_pattern_scanner_optimized.py
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: multi-ticker-daily-pattern-logs-${{ github.run_id }}
        path: |
          *.log
          *.json
        if-no-files-found: warn
        retention-days: 7

  performance-summary:
    runs-on: ubuntu-latest
    needs: scan-daily-patterns
    # Run at 4:45 PM ET daily to generate performance report (after all scans complete)
    if: |
      github.event_name == 'schedule' && 
      (contains(github.event.schedule, '45 20') || contains(github.event.schedule, '45 21'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python with conda (includes TA-Lib)
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: '3.10'
        miniforge-version: latest
        use-mamba: true
        channels: conda-forge
        channel-priority: strict
    
    - name: Install dependencies using conda/mamba
      shell: bash -l {0}
      run: |
        # Install TA-Lib and other dependencies via conda-forge
        mamba install -y ta-lib pandas numpy
        
        # Install Azure dependencies via pip
        pip install azure-storage-blob python-dotenv
    
    - name: Create config directory and .env file
      shell: bash -l {0}
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Generate ML-optimized performance summary for all tickers
      shell: bash -l {0}
      run: |
        python -c "
        from daily_pattern_scanner_optimized import OptimizedDailyPatternScanner
        scanner = OptimizedDailyPatternScanner()
        summary = scanner.get_performance_summary()
        if summary:
            print('ML-Optimized Daily Pattern Summary:')
            print(f'  Total Evaluations: {summary['total_evaluations']}')
            print(f'  Recommendations: {summary['buy_signals']} buys, {summary['sell_signals']} sells, {summary['hold_signals']} holds')
            print(f'  Average Confidence: {summary['avg_confidence']:.1%}')
            print(f'  Strong Signals: {summary['strong_signals']} ({summary['strong_signal_pct']}%)')
            print(f'  Scanner Version: {summary['scanner_version']}')
            print('')
            print('Pattern Distribution:')
            for pattern, count in summary['pattern_distribution'].items():
                print(f'  {pattern}: {count}')
            print('')
            print('Ticker Distribution:')
            for ticker, count in summary['ticker_distribution'].items():
                print(f'  {ticker}: {count}')
        else:
            print('Insufficient data for performance summary (need at least 5 evaluations)')
        "
    
    - name: Create issue with ML-optimized daily summary
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ML-Optimized Daily Pattern Scanner Summary - ${date}`,
            body: `ðŸ¤– **ML-Optimized Daily Pattern Analysis Complete**
            
            Today's daily chart patterns have been analyzed using the ML-optimized scanner for NVDA, AAPL, MSFT, GOOGL, AMZN, TSLA, BTC-USD, and AC.TO.
            
            **Key Improvements:**
            - âœ… Uses actual daily data instead of intraday data (key optimization from backtesting)
            - âœ… ML-optimized pattern confidence thresholds based on historical success rates
            - âœ… Enhanced pattern filtering with trend context and volume confirmation
            - âœ… Dynamic risk management with ATR-based stops and targets
            - âœ… Ticker-specific parameter optimization
            
            **Performance Insight:**
            Based on walk-forward testing, this optimizer achieves +7.70% return vs -13.29% with the original approach.
            
            ðŸ“Š Check the next_day_technical/ folder in Azure for:
            - daily_predictions.json (trading recommendations)
            - performance_summary.json (ML metrics)
            
            Generated with ML-Optimized Daily Pattern Scanner v2.0`,
            labels: ['automated', 'daily-report', 'ml-optimized', 'pattern-scanner']
          });