name: Simple Technical Scanner - MSFT (Intraday)

on:
  schedule:
    # Run every 15 minutes during market hours (9:30 AM - 4:00 PM ET)
    # Staggered 4 minutes after NVDA to avoid Azure conflicts
    - cron: '4,19,34,49 14-20 * * 1-5'  # EST: runs every 15 minutes at :04, :19, :34, :49
    - cron: '4,19,34,49 13-19 * * 1-5'  # EDT: runs every 15 minutes at :04, :19, :34, :49
  
  workflow_dispatch:  # Allow manual trigger

jobs:
  scan-intraday:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check market hours
      id: market-check
      run: |
        # Get current time in ET
        CURRENT_HOUR=$(TZ='America/New_York' date +%H)
        CURRENT_MIN=$(TZ='America/New_York' date +%M)
        CURRENT_DAY=$(TZ='America/New_York' date +%u)
        CURRENT_TIME=$((CURRENT_HOUR * 60 + CURRENT_MIN))
        
        # Market hours check
        MARKET_OPEN=$((9 * 60 + 30))
        MARKET_CLOSE=$((16 * 60))
        
        if [ $CURRENT_DAY -le 5 ] && [ $CURRENT_TIME -ge $MARKET_OPEN ] && [ $CURRENT_TIME -lt $MARKET_CLOSE ]; then
          echo "market_open=true" >> $GITHUB_OUTPUT
          echo "Market is open - running MSFT scan"
        else
          echo "market_open=false" >> $GITHUB_OUTPUT
          echo "Market is closed - skipping MSFT scan"
        fi
    
    - name: Checkout repository
      if: steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v4
    
    - name: Set up Python
      if: steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      if: steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas numpy azure-storage-blob python-dotenv
    
    - name: Create config directory and .env file
      if: steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Run simple technical scanner for MSFT
      if: steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        export TICKER="MSFT"
        python simple_technical_scanner.py
    
    - name: Upload logs
      if: always() && (steps.market-check.outputs.market_open == 'true' || github.event_name == 'workflow_dispatch')
      uses: actions/upload-artifact@v4
      with:
        name: msft-technical-scan-logs-${{ github.run_id }}
        path: |
          *.log
          current_signal.json
        if-no-files-found: warn
        retention-days: 7

  performance-summary:
    runs-on: ubuntu-latest
    # Run at 4:19 PM ET daily to generate performance report (staggered after AAPL)
    if: |
      github.event_name == 'schedule' && 
      (contains(github.event.schedule, '19 20') || contains(github.event.schedule, '19 21'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas azure-storage-blob python-dotenv
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Generate performance summary for MSFT
      run: |
        export TICKER="MSFT"
        python -c "
        from simple_technical_scanner import SimpleTechnicalScanner
        scanner = SimpleTechnicalScanner()
        summary = scanner.get_performance_summary()
        print('MSFT Daily Performance Summary:')
        print(f'Total Signals: {summary[\"total_signals\"]}')
        print(f'Buy: {summary[\"buy_signals\"]}, Sell: {summary[\"sell_signals\"]}, Hold: {summary[\"hold_signals\"]}')
        print(f'Average Confidence: {summary[\"avg_confidence\"]:.1%}')
        "
    
    - name: Create issue with daily summary
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Simple Technical Scanner Daily Summary - MSFT - ${date}`,
            body: 'Today\'s MSFT intraday technical signals have been analyzed. Check the performance_summary.json in Azure for detailed metrics.',
            labels: ['automated', 'daily-report', 'technical', 'msft']
          });