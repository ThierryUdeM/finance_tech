name: Pattern Scanner and Evaluator

on:
  schedule:
    # Run scanner every 30 minutes during market hours (9:30 AM - 4:00 PM ET)
    # GitHub Actions uses UTC time, so 9:30 AM ET = 2:30 PM UTC (during EST)
    # and 1:30 PM UTC during EDT
    - cron: '0,30 14-20 * * 1-5'  # EST: runs at :00 and :30 of each hour
    - cron: '0,30 13-19 * * 1-5'  # EDT: runs at :00 and :30 of each hour
    # Run evaluator at 4:30 PM ET (after market close)
    - cron: '30 21 * * 1-5'  # EST: 4:30 PM ET = 9:30 PM UTC
    - cron: '30 20 * * 1-5'  # EDT: 4:30 PM ET = 8:30 PM UTC
  
  workflow_dispatch:  # Allow manual trigger
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'scan'
        type: choice
        options:
          - scan
          - evaluate
          - both
      ticker:
        description: 'Stock ticker'
        required: true
        default: 'NVDA'
        type: string

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      market-open: ${{ steps.check-market.outputs.is-open }}
    
    steps:
    - name: Check if market is open
      id: check-market
      run: |
        # Get current time in ET
        CURRENT_HOUR=$(TZ='America/New_York' date +%H)
        CURRENT_MIN=$(TZ='America/New_York' date +%M)
        CURRENT_DAY=$(TZ='America/New_York' date +%u)
        
        # Check if it's a weekday (1-5)
        if [ $CURRENT_DAY -gt 5 ]; then
          echo "is-open=false" >> $GITHUB_OUTPUT
          echo "Market is closed (weekend)"
          exit 0
        fi
        
        # Check if market hours (9:30 AM - 4:00 PM ET)
        CURRENT_TIME=$((CURRENT_HOUR * 60 + CURRENT_MIN))
        MARKET_OPEN=$((9 * 60 + 30))
        MARKET_CLOSE=$((16 * 60))
        
        if [ $CURRENT_TIME -ge $MARKET_OPEN ] && [ $CURRENT_TIME -lt $MARKET_CLOSE ]; then
          echo "is-open=true" >> $GITHUB_OUTPUT
          echo "Market is open"
        else
          echo "is-open=false" >> $GITHUB_OUTPUT
          echo "Market is closed"
        fi

  scan-patterns:
    needs: setup-environment
    if: |
      (github.event_name == 'schedule' && needs.setup-environment.outputs.market-open == 'true') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'scan' || github.event.inputs.action == 'both'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas numpy scipy mplfinance azure-storage-blob python-dotenv
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Copy pattern scanner module
      run: |
        # Copy the pattern scanner from the repository
        mkdir -p /tmp/script
        cp pattern_scanner.py /tmp/script/
        
        # Update the import path in our tracker
        sed -i 's|/home/thierrygc/script/|/tmp/script/|g' pattern_signal_tracker.py
    
    - name: Run pattern scanner
      run: |
        TICKER="${{ github.event.inputs.ticker || 'NVDA' }}"
        python pattern_signal_tracker.py scan --ticker $TICKER
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scan-logs
        path: |
          *.log
          signals_*.json
        if-no-files-found: warn

  evaluate-signals:
    needs: setup-environment
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'evaluate' || github.event.inputs.action == 'both')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas numpy scipy mplfinance azure-storage-blob python-dotenv
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Copy pattern scanner module
      run: |
        # Copy the pattern scanner from the repository
        mkdir -p /tmp/script
        cp pattern_scanner.py /tmp/script/
        
        # Update the import path in our tracker
        sed -i 's|/home/thierrygc/script/|/tmp/script/|g' pattern_signal_tracker.py
    
    - name: Evaluate signals
      run: |
        TICKER="${{ github.event.inputs.ticker || 'NVDA' }}"
        python pattern_signal_tracker.py evaluate --ticker $TICKER --hours 48
    
    - name: Upload evaluation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-results
        path: |
          *.log
          evaluation_*.json
        if-no-files-found: warn

  end-of-day-evaluation:
    if: |
      github.event_name == 'schedule' && 
      (contains(github.event.schedule, '30 21') || contains(github.event.schedule, '30 20'))
    runs-on: ubuntu-latest
    # Run at 4:30 PM ET (after market close)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas numpy scipy mplfinance azure-storage-blob python-dotenv matplotlib
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Copy pattern scanner module
      run: |
        # Same as in scan-patterns job
        if [ -n "${{ secrets.PATTERN_SCANNER_CODE }}" ]; then
          mkdir -p /tmp/script
          cat > /tmp/script/pattern_scanner.py << 'EOF'
        ${{ secrets.PATTERN_SCANNER_CODE }}
        EOF
        else
          mkdir -p /tmp/script
          if [ -f "pattern_scanner.py" ]; then
            cp pattern_scanner.py /tmp/script/
          else
            cat > /tmp/script/pattern_scanner.py << 'EOFPS'
        import pandas as pd
        import numpy as np
        from scipy.signal import find_peaks
        
        def clean_yfinance_data(data):
            cleaned_data = data.copy()
            if isinstance(cleaned_data.columns, pd.MultiIndex):
                cleaned_data.columns = cleaned_data.columns.get_level_values(0)
            for col in ['Open', 'High', 'Low', 'Close', 'Volume']:
                if col in cleaned_data.columns:
                    cleaned_data[col] = pd.to_numeric(cleaned_data[col], errors='coerce')
            cleaned_data.dropna(inplace=True)
            return cleaned_data
        
        def find_head_and_shoulders(data):
            return None
        
        def find_inverse_head_and_shoulders(data):
            return None
        
        def find_double_top(data):
            return None
        
        def find_double_bottom(data):
            return None
        
        def calculate_trading_signals(data, pattern_name, points):
            current_price = float(data['Close'].iloc[-1])
            return {
                'action': 'BUY',
                'current_price': current_price,
                'entry': current_price * 1.01,
                'stop_loss': current_price * 0.98,
                'target': current_price * 1.03,
                'risk_reward': 1.5,
                'distance_to_entry': 1.0
            }
        EOFPS
          fi
        fi
        
        # Update the import path in our tracker
        sed -i 's|/home/thierrygc/script/|/tmp/script/|g' pattern_signal_tracker.py
    
    - name: Run end-of-day evaluation
      run: |
        # Evaluate signals from the past trading day
        TICKERS="NVDA AAPL MSFT GOOGL TSLA"
        echo "=== End of Day Pattern Evaluation ==="
        echo "Evaluating patterns detected during today's trading session"
        echo ""
        
        for TICKER in $TICKERS; do
          echo "\n--- Evaluating $TICKER ---"
          python pattern_signal_tracker.py evaluate --ticker $TICKER --hours 8
        done
    
    - name: Create issue with daily report
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Pattern Scanner End-of-Day Evaluation - ${date}`,
            body: 'Today\'s pattern signals have been evaluated. Check the workflow logs for win rates and detailed results.',
            labels: ['automated', 'daily-report']
          });