name: Daily Pattern Scanner - NVDA

on:
  schedule:
    # Run at 4:30 PM ET daily (after market close) - NVDA baseline
    - cron: '30 20 * * 1-5'  # EST: 4:30 PM ET
    - cron: '30 21 * * 1-5'  # EDT: 4:30 PM ET
    # Morning alert at 9:15 AM ET (before market open)
    - cron: '15 13 * * 1-5'  # EDT: 9:15 AM ET = 1:15 PM UTC
    - cron: '15 14 * * 1-5'  # EST: 9:15 AM ET = 2:15 PM UTC
  
  workflow_dispatch:  # Allow manual trigger
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'scan'
        type: choice
        options:
          - scan
          - evaluate
          - both
          - end-of-day
          - morning-alert
      ticker:
        description: 'Stock ticker'
        required: true
        default: 'NVDA'
        type: string

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      market-open: ${{ steps.check-market.outputs.is-open }}
    
    steps:
    - name: Check if market is open
      id: check-market
      run: |
        # Get current time in ET
        CURRENT_HOUR=$(TZ='America/New_York' date +%H)
        CURRENT_MIN=$(TZ='America/New_York' date +%M)
        CURRENT_DAY=$(TZ='America/New_York' date +%u)
        
        # Check if it's a weekday (1-5)
        if [ $CURRENT_DAY -gt 5 ]; then
          echo "is-open=false" >> $GITHUB_OUTPUT
          echo "Market is closed (weekend)"
          exit 0
        fi
        
        # Check if market hours (9:30 AM - 4:00 PM ET)
        CURRENT_TIME=$((CURRENT_HOUR * 60 + CURRENT_MIN))
        MARKET_OPEN=$((9 * 60 + 30))
        MARKET_CLOSE=$((16 * 60))
        
        if [ $CURRENT_TIME -ge $MARKET_OPEN ] && [ $CURRENT_TIME -lt $MARKET_CLOSE ]; then
          echo "is-open=true" >> $GITHUB_OUTPUT
          echo "Market is open"
        else
          echo "is-open=false" >> $GITHUB_OUTPUT
          echo "Market is closed"
        fi

  scan-patterns:
    needs: setup-environment
    if: |
      (github.event_name == 'schedule' && (contains(github.event.schedule, '55 20') || contains(github.event.schedule, '55 21'))) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'scan' || github.event.inputs.action == 'both'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget build-essential git
        
        # Download and install TA-Lib from source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        # Use single-threaded make to avoid race condition
        make
        sudo make install
        cd ..
        
        # Update library cache and create symlinks
        sudo ldconfig
        
        # Verify installation and fix library naming
        echo "Checking installed files..."
        ls -la /usr/lib/libta_lib* || echo "No libta_lib found in /usr/lib"
        ls -la /usr/lib/libta-lib* || echo "No libta-lib found in /usr/lib"
        ls -la /usr/include/ta-lib/ || echo "No headers found"
        
        # Create symlinks with both naming conventions
        if [ -f /usr/lib/libta_lib.so.0.0.0 ]; then
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so.0
          # Also create hyphenated versions
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so.0
        fi
        
        # Update library cache
        sudo ldconfig -v 2>/dev/null | grep -E 'ta_lib|ta-lib' || echo "Library not found in ldconfig"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel
        
        # Install all requirements except TA-Lib first
        grep -v -E "TA-Lib|tradingpatterns" requirements_pattern_scanner.txt > requirements_no_talib.txt
        pip install -r requirements_no_talib.txt
        
        # Set environment variables for TA-Lib compilation
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        export LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LIBRARY_PATH
        export CPATH=/usr/include:/usr/local/include:$CPATH
        
        # Install TA-Lib Python wrapper - use older version compatible with TA-Lib 0.4.0
        pip install --no-cache-dir TA-Lib==0.4.19
        
        # Verify TA-Lib is installed
        python -c "import talib; print(f'TA-Lib version: {talib.__version__}')"
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Run daily pattern scanner
      run: |
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        export TICKER="NVDA"
        python daily_pattern_scanner.py
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scan-logs
        path: |
          *.log
          signals_*.json
        if-no-files-found: warn

  evaluate-signals:
    needs: setup-environment
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.action == 'evaluate' || github.event.inputs.action == 'both')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget build-essential git
        
        # Download and install TA-Lib from source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        # Use single-threaded make to avoid race condition
        make
        sudo make install
        cd ..
        
        # Update library cache and create symlinks
        sudo ldconfig
        
        # Verify installation and fix library naming
        echo "Checking installed files..."
        ls -la /usr/lib/libta_lib* || echo "No libta_lib found in /usr/lib"
        ls -la /usr/lib/libta-lib* || echo "No libta-lib found in /usr/lib"
        ls -la /usr/include/ta-lib/ || echo "No headers found"
        
        # Create symlinks with both naming conventions
        if [ -f /usr/lib/libta_lib.so.0.0.0 ]; then
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so.0
          # Also create hyphenated versions
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so.0
        fi
        
        # Update library cache
        sudo ldconfig -v 2>/dev/null | grep -E 'ta_lib|ta-lib' || echo "Library not found in ldconfig"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel
        
        # Install all requirements except TA-Lib first
        grep -v -E "TA-Lib|tradingpatterns" requirements_pattern_scanner.txt > requirements_no_talib.txt
        pip install -r requirements_no_talib.txt
        
        # Set environment variables for TA-Lib compilation
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        export LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LIBRARY_PATH
        export CPATH=/usr/include:/usr/local/include:$CPATH
        
        # Install TA-Lib Python wrapper - use older version compatible with TA-Lib 0.4.0
        pip install --no-cache-dir TA-Lib==0.4.19
        
        # Verify TA-Lib is installed
        python -c "import talib; print(f'TA-Lib version: {talib.__version__}')"
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Evaluate patterns
      run: |
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        python pattern_evaluator.py
    
    - name: Upload evaluation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-results
        path: |
          *.log
          evaluation_*.json
        if-no-files-found: warn

  morning-alert:
    if: |
      (github.event_name == 'schedule' && 
      (contains(github.event.schedule, '15 13') || contains(github.event.schedule, '15 14'))) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'morning-alert')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install azure-storage-blob python-dotenv pandas
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Send morning alert
      run: |
        python morning_alert.py

  end-of-day-evaluation:
    if: |
      (github.event_name == 'schedule' && 
      (contains(github.event.schedule, '30 21') || contains(github.event.schedule, '30 20'))) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'end-of-day')
    runs-on: ubuntu-latest
    # Run at 4:30 PM ET (after market close) or when manually triggered
    
    permissions:
      contents: read
      issues: write  # Required for creating issues
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget build-essential git
        
        # Download and install TA-Lib from source
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        # Use single-threaded make to avoid race condition
        make
        sudo make install
        cd ..
        
        # Update library cache and create symlinks
        sudo ldconfig
        
        # Verify installation and fix library naming
        echo "Checking installed files..."
        ls -la /usr/lib/libta_lib* || echo "No libta_lib found in /usr/lib"
        ls -la /usr/lib/libta-lib* || echo "No libta-lib found in /usr/lib"
        ls -la /usr/include/ta-lib/ || echo "No headers found"
        
        # Create symlinks with both naming conventions
        if [ -f /usr/lib/libta_lib.so.0.0.0 ]; then
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta_lib.so.0
          # Also create hyphenated versions
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so
          sudo ln -sf /usr/lib/libta_lib.so.0.0.0 /usr/lib/libta-lib.so.0
        fi
        
        # Update library cache
        sudo ldconfig -v 2>/dev/null | grep -E 'ta_lib|ta-lib' || echo "Library not found in ldconfig"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel
        
        # Install all requirements except TA-Lib first
        grep -v -E "TA-Lib|tradingpatterns" requirements_pattern_scanner.txt > requirements_no_talib.txt
        pip install -r requirements_no_talib.txt
        
        # Set environment variables for TA-Lib compilation
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        export LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LIBRARY_PATH
        export CPATH=/usr/include:/usr/local/include:$CPATH
        
        # Install TA-Lib Python wrapper - use older version compatible with TA-Lib 0.4.0
        pip install --no-cache-dir TA-Lib==0.4.19
        
        # Verify TA-Lib is installed
        python -c "import talib; print(f'TA-Lib version: {talib.__version__}')" matplotlib
    
    - name: Create config directory and .env file
      run: |
        mkdir -p config
        cat > config/.env << EOF
        AZURE_STORAGE_ACCOUNT=${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY=${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}
        EOF
    
    - name: Run end-of-day comprehensive evaluation
      run: |
        echo "=== End of Day Pattern Evaluation ==="
        echo "Evaluating all patterns detected during today's trading session"
        export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH
        python pattern_evaluator.py
    
    - name: Create issue with daily report
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Pattern Scanner End-of-Day Evaluation - ${date}`,
            body: 'Today\'s pattern signals have been evaluated. Check the workflow logs for win rates and detailed results.',
            labels: ['automated', 'daily-report']
          });