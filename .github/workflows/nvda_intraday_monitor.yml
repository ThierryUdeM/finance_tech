name: NVDA Intraday Pattern Monitor

on:
  schedule:
    # Run every 15 minutes during market hours (9:30 AM - 4:00 PM EST)
    # In UTC: 2:30 PM - 9:00 PM (14:30 - 21:00)
    - cron: '*/15 14-20 * * 1-5'  # Every 15 min, 14:00-20:59 UTC, Mon-Fri
    - cron: '0 21 * * 1-5'         # Final run at 21:00 UTC (4 PM EST)
  workflow_dispatch:  # Allow manual trigger

jobs:
  monitor:
    runs-on: ubuntu-latest
    # Only run during US market hours
    if: github.event_name == 'workflow_dispatch' || (github.event.schedule == '*/15 14-20 * * 1-5' || github.event.schedule == '0 21 * * 1-5')
    
    permissions:
      contents: read
      issues: write  # Only need write for creating issue alerts
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy yfinance azure-storage-blob
        
    - name: Check market status
      id: market_check
      run: |
        python3 test_market_check.py || true
        echo "market_open=$?" >> $GITHUB_OUTPUT
        
    - name: Pull latest prediction history
      if: steps.market_check.outputs.market_open == '0'
      run: |
        # Pull any changes to avoid conflicts
        git pull origin main || true
        
    - name: Prepare data directories
      if: steps.market_check.outputs.market_open == '0'
      run: |
        mkdir -p directional_analysis
        mkdir -p ChartScanAI_Shiny/evaluation_results
        
        # Copy historical data
        if [ -f "data/NVDA_15min_pattern_ready.csv" ]; then
          cp data/NVDA_15min_pattern_ready.csv directional_analysis/
        fi
        
    - name: Download current intraday data
      if: steps.market_check.outputs.market_open == '0'
      run: |
        python3 ChartScanAI_Shiny/download_intraday_data.py || echo "Using cached data"
        
    - name: Generate and evaluate predictions
      if: steps.market_check.outputs.market_open == '0'
      run: |
        cd ChartScanAI_Shiny
        
        # Run intraday evaluation
        python evaluate_intraday_predictions.py
        
        # Show current prediction
        echo ""
        echo "Latest Prediction Summary:"
        if [ -f "evaluation_results/nvda_prediction_history.json" ]; then
          python3 ../show_prediction_summary.py || echo "No predictions to show yet"
        fi
        
    - name: Upload results to Azure
      if: steps.market_check.outputs.market_open == '0'
      env:
        AZURE_STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_KEY: ${{ secrets.ACCESS_KEY }}
        AZURE_CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      run: |
        # Ensure dependencies are installed
        pip install pandas azure-storage-blob
        
        # Upload prediction and evaluation results to Azure
        python3 save_results_to_azure.py
        
    - name: Create alert for significant predictions
      if: steps.market_check.outputs.market_open == '0' && failure()
      uses: actions/github-script@v6
      with:
        script: |
          // Parse latest prediction
          const fs = require('fs');
          const historyPath = 'ChartScanAI_Shiny/evaluation_results/nvda_prediction_history.json';
          
          if (fs.existsSync(historyPath)) {
            const history = JSON.parse(fs.readFileSync(historyPath, 'utf8'));
            const latest = history[history.length - 1];
            
            // Check for significant predictions (>1% move)
            const significant = Math.abs(latest.pred_1h_pct) > 1.0 || 
                               Math.abs(latest.pred_3h_pct) > 1.0 || 
                               Math.abs(latest.pred_eod_pct) > 1.0;
            
            if (significant) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `NVDA Alert: Significant price movement predicted`,
                body: `The pattern prediction system has identified a significant potential move:
                
                **Current Price**: $${latest.current_price.toFixed(2)}
                
                **Predictions**:
                - 1 Hour: ${latest.pred_1h_pct.toFixed(3)}% (${latest.pred_1h_dir})
                - 3 Hour: ${latest.pred_3h_pct.toFixed(3)}% (${latest.pred_3h_dir})
                - EOD: ${latest.pred_eod_pct.toFixed(3)}% (${latest.pred_eod_dir})
                
                Confidence: ${latest.confidence}
                
                [View Details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
                labels: ['alert', 'nvda-prediction']
              });
            }
          }